{"version":3,"sources":["funciones.js","components/cpu/cpu.js","App.js","serviceWorker.js","index.js"],"names":["randDarkColor","hex","String","Math","random","toString","slice","toUpperCase","replace","length","c","i","rgb","parseInt","substr","round","min","max","CPU","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","inicializarState","setState","decodificador","decodificadorInicial","memoria","acumulador","color","valor","registroEntrada","contador","registroInstrucciones","registroDirecciones","registroDatos","cargarMemoria","memoriaInicial","map","registro","objectSpread","finalizado","aumentarContador","colorCiclo","_this$state","state","contadorAumentado","concat","toConsumableArray","forEach","_ref","direccion","realizarOperacion","operacionAritmeticoLogica","moverAMemoria","finalizar","reset","operacion","_this$state2","ultimoRegistroDatos","_ref2","resultado","_this$state3","pow","floor","_this$state4","_this$state5","nuevaMemoria","registroMemoria","find","_ref3","push","_this$state6","_ref4","_this$state7","_this2","_this$state8","react_default","a","createElement","index_es","alignItems","container","spacing","item","sm","xs","fullWidth","className","onClick","memoriaInicial1","variant","memoriaInicial2","memoriaInicial3","disabled","Timer_default","direction","lg","md","disableTypography","title","key","instruccion","comentario","_ref5","indice","style","_ref6","_ref7","_ref8","_ref9","_ref10","_ref11","_ref12","Component","theme","createMuiTheme","overrides","MuiTableCell","root","padding","MuiTableRow","height","typography","useNextVariants","App","styles","cpu","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2658127c.chunk.js","sourcesContent":["export const randDarkColor = () => {\r\n  var lum = -0.25;\r\n  var hex = String(\r\n    '#' +\r\n      Math.random()\r\n        .toString(16)\r\n        .slice(2, 8)\r\n        .toUpperCase()\r\n  ).replace(/[^0-9a-f]/gi, '');\r\n  if (hex.length < 6) {\r\n    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\r\n  }\r\n  var rgb = '#',\r\n    c,\r\n    i;\r\n  for (i = 0; i < 3; i++) {\r\n    c = parseInt(hex.substr(i * 2, 2), 16);\r\n    c = Math.round(Math.min(Math.max(0, c + c * lum), 255)).toString(16);\r\n    rgb += ('00' + c).substr(c.length);\r\n  }\r\n  return rgb;\r\n};\r\n","import React, { Component } from 'react';\r\n\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  Grid,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Typography\r\n} from '@material-ui/core';\r\nimport TimerIcon from '@material-ui/icons/Timer';\r\n\r\nimport { randDarkColor } from '../../funciones';\r\n\r\nimport './styles.css';\r\n\r\nimport decodificadorInicial from './decodificadorInicial.json';\r\nimport memoriaInicial1 from './memoriaInicial1.json';\r\nimport memoriaInicial2 from './memoriaInicial2.json';\r\nimport memoriaInicial3 from './memoriaInicial3.json';\r\n\r\nclass CPU extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      decodificador: decodificadorInicial,\r\n      memoria: [],\r\n      acumulador: [{ color: '#000', valor: 0 }],\r\n      registroEntrada: [],\r\n      contador: [],\r\n      registroInstrucciones: [],\r\n      registroDirecciones: [],\r\n      registroDatos: [],\r\n      finalizado: false\r\n    };\r\n  }\r\n\r\n  inicializarState = () => {\r\n    this.setState({\r\n      decodificador: decodificadorInicial,\r\n      memoria: [],\r\n      acumulador: [{ color: '#000', valor: 0 }],\r\n      registroEntrada: [],\r\n      contador: [],\r\n      registroInstrucciones: [],\r\n      registroDirecciones: [],\r\n      registroDatos: []\r\n    });\r\n  };\r\n\r\n  cargarMemoria = memoriaInicial => {\r\n    this.inicializarState();\r\n    this.setState({\r\n      memoria: memoriaInicial.map(registro => ({ ...registro })),\r\n      finalizado: false\r\n    });\r\n  };\r\n\r\n  aumentarContador = () => {\r\n    const colorCiclo = randDarkColor();\r\n    const {\r\n      memoria,\r\n      contador,\r\n      registroInstrucciones,\r\n      registroDirecciones,\r\n      registroDatos\r\n    } = this.state;\r\n    const contadorAumentado = contador.length;\r\n    this.setState(\r\n      {\r\n        contador: [...contador, { color: colorCiclo, valor: contadorAumentado }],\r\n        registroDirecciones: [\r\n          ...registroDirecciones,\r\n          { color: colorCiclo, valor: contadorAumentado }\r\n        ]\r\n      },\r\n      () => {\r\n        memoria.forEach(({ direccion, valor }) => {\r\n          if (direccion === contadorAumentado) {\r\n            const { registroDirecciones } = this.state;\r\n            this.setState(\r\n              {\r\n                registroInstrucciones: [\r\n                  ...registroInstrucciones,\r\n                  {\r\n                    color: colorCiclo,\r\n                    valor: parseInt(\r\n                      ('000000000000'.substr(valor.toString(2).length) + valor.toString(2)).slice(\r\n                        0,\r\n                        4\r\n                      ),\r\n                      2\r\n                    )\r\n                  }\r\n                ],\r\n                registroDirecciones: [\r\n                  ...registroDirecciones,\r\n                  {\r\n                    color: colorCiclo,\r\n                    valor: parseInt(\r\n                      ('000000000000'.substr(valor.toString(2).length) + valor.toString(2)).slice(\r\n                        -8\r\n                      ),\r\n                      2\r\n                    )\r\n                  }\r\n                ],\r\n                registroDatos: [...registroDatos, { color: colorCiclo, valor }]\r\n              },\r\n              () => {\r\n                this.realizarOperacion(colorCiclo);\r\n              }\r\n            );\r\n          }\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  realizarOperacion = colorCiclo => {\r\n    const { registroInstrucciones } = this.state;\r\n    switch (registroInstrucciones[registroInstrucciones.length - 1].valor) {\r\n      case 0:\r\n        this.operacionAritmeticoLogica('suma', colorCiclo);\r\n        break;\r\n      case 1:\r\n        this.operacionAritmeticoLogica('resta', colorCiclo);\r\n        break;\r\n      case 2:\r\n        this.operacionAritmeticoLogica('producto', colorCiclo);\r\n        break;\r\n      case 3:\r\n        this.operacionAritmeticoLogica('potencia', colorCiclo);\r\n        break;\r\n      case 4:\r\n        this.operacionAritmeticoLogica('AND', colorCiclo);\r\n        break;\r\n      case 5:\r\n        this.operacionAritmeticoLogica('OR', colorCiclo);\r\n        break;\r\n      case 6:\r\n        this.moverAMemoria(colorCiclo);\r\n        break;\r\n      case 7:\r\n        this.finalizar();\r\n        break;\r\n      case 8:\r\n        this.reset(colorCiclo);\r\n        break;\r\n      case 9:\r\n        this.operacionAritmeticoLogica('division', colorCiclo);\r\n        break;\r\n      case 10:\r\n        this.operacionAritmeticoLogica('NOT', colorCiclo);\r\n        break;\r\n      case 11:\r\n        this.operacionAritmeticoLogica('XOR', colorCiclo);\r\n        break;\r\n      default:\r\n    }\r\n  };\r\n\r\n  operacionAritmeticoLogica = (operacion, colorCiclo) => {\r\n    const { registroDatos, memoria } = this.state;\r\n    const ultimoRegistroDatos = parseInt(\r\n      (\r\n        '000000000000'.substr(registroDatos[registroDatos.length - 1].valor.toString(2).length) +\r\n        registroDatos[registroDatos.length - 1].valor.toString(2)\r\n      ).slice(-8),\r\n      2\r\n    );\r\n    memoria.forEach(({ direccion, valor }) => {\r\n      if (direccion === ultimoRegistroDatos) {\r\n        const { registroEntrada, acumulador } = this.state;\r\n        let resultado;\r\n        switch (operacion) {\r\n          case 'suma':\r\n            resultado = acumulador[acumulador.length - 1].valor + valor;\r\n            break;\r\n          case 'resta':\r\n            resultado = acumulador[acumulador.length - 1].valor - valor;\r\n            break;\r\n          case 'producto':\r\n            resultado = acumulador[acumulador.length - 1].valor * valor;\r\n            break;\r\n          case 'potencia':\r\n            resultado = Math.pow(acumulador[acumulador.length - 1].valor, valor);\r\n            break;\r\n          case 'AND':\r\n            resultado = acumulador[acumulador.length - 1].valor & valor;\r\n            break;\r\n          case 'OR':\r\n            resultado = acumulador[acumulador.length - 1].valor | valor;\r\n            break;\r\n          case 'division':\r\n            resultado = Math.floor(acumulador[acumulador.length - 1].valor / valor);\r\n            break;\r\n          case 'NOT':\r\n            resultado = parseInt((~valor >>> 0).toString(2).slice(-12), 2);\r\n            break;\r\n          case 'XOR':\r\n            resultado = acumulador[acumulador.length - 1].valor ^ valor;\r\n            break;\r\n          default:\r\n        }\r\n        this.setState({\r\n          registroDatos: [...registroDatos, { color: colorCiclo, valor }],\r\n          registroEntrada: [...registroEntrada, { color: colorCiclo, valor }],\r\n          acumulador: [...acumulador, { color: colorCiclo, valor: resultado }]\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  moverAMemoria = colorCiclo => {\r\n    const { acumulador, registroDatos } = this.state;\r\n    this.setState(\r\n      {\r\n        acumulador: [\r\n          ...acumulador,\r\n          { color: colorCiclo, valor: acumulador[acumulador.length - 1].valor }\r\n        ],\r\n        registroDatos: [\r\n          ...registroDatos,\r\n          { color: colorCiclo, valor: acumulador[acumulador.length - 1].valor }\r\n        ]\r\n      },\r\n      () => {\r\n        const { registroDirecciones, registroDatos, memoria } = this.state;\r\n        let nuevaMemoria = [...memoria];\r\n        const registroMemoria = nuevaMemoria.find(\r\n          ({ direccion }) => direccion === registroDirecciones[registroDirecciones.length - 1].valor\r\n        );\r\n        if (registroMemoria) {\r\n          registroMemoria.color = colorCiclo;\r\n          registroMemoria.valor = registroDatos[registroDatos.length - 1].valor;\r\n        } else {\r\n          nuevaMemoria.push({\r\n            color: colorCiclo,\r\n            direccion: registroDirecciones[registroDirecciones.length - 1].valor,\r\n            valor: registroDatos[registroDatos.length - 1].valor\r\n          });\r\n        }\r\n        this.setState({ memoria: nuevaMemoria });\r\n      }\r\n    );\r\n  };\r\n\r\n  finalizar = () => {\r\n    this.setState({ finalizado: true });\r\n  };\r\n\r\n  reset = colorCiclo => {\r\n    const { registroDirecciones, memoria } = this.state;\r\n    memoria.forEach(({ direccion, valor }) => {\r\n      if (direccion === registroDirecciones[registroDirecciones.length - 1].valor) {\r\n        const { registroDatos } = this.state;\r\n        this.setState(\r\n          {\r\n            registroDatos: [\r\n              ...registroDatos,\r\n              {\r\n                color: colorCiclo,\r\n                valor: parseInt(\r\n                  ('000000000000'.substr(valor.toString(2).length) + valor.toString(2)).slice(-8),\r\n                  2\r\n                )\r\n              }\r\n            ]\r\n          },\r\n          () => {\r\n            const { registroDatos, registroEntrada, acumulador } = this.state;\r\n            this.setState({\r\n              acumulador: [\r\n                ...acumulador,\r\n                { color: colorCiclo, valor: registroDatos[registroDatos.length - 1].valor }\r\n              ],\r\n              registroEntrada: [\r\n                ...registroEntrada,\r\n                { color: colorCiclo, valor: registroDatos[registroDatos.length - 1].valor }\r\n              ]\r\n            });\r\n          }\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      decodificador,\r\n      memoria,\r\n      acumulador,\r\n      registroEntrada,\r\n      contador,\r\n      registroInstrucciones,\r\n      registroDirecciones,\r\n      registroDatos,\r\n      finalizado\r\n    } = this.state;\r\n    return (\r\n      <div>\r\n        <Grid alignItems=\"flex-start\" container spacing={16}>\r\n          <Grid item sm=\"auto\" xs={12}>\r\n            <Button\r\n              fullWidth\r\n              color=\"primary\"\r\n              className=\"botonEncabezado\"\r\n              onClick={() => {\r\n                this.cargarMemoria(memoriaInicial1);\r\n              }}\r\n              variant=\"contained\"\r\n            >\r\n              Cargar operación 1\r\n            </Button>\r\n          </Grid>\r\n          <Grid item sm=\"auto\" xs={12}>\r\n            <Button\r\n              fullWidth\r\n              color=\"primary\"\r\n              className=\"botonEncabezado\"\r\n              onClick={() => {\r\n                this.cargarMemoria(memoriaInicial2);\r\n              }}\r\n              variant=\"contained\"\r\n            >\r\n              Cargar operación 2\r\n            </Button>\r\n          </Grid>\r\n          <Grid item sm=\"auto\" xs={12}>\r\n            <Button\r\n              fullWidth\r\n              color=\"primary\"\r\n              className=\"botonEncabezado\"\r\n              onClick={() => {\r\n                this.cargarMemoria(memoriaInicial3);\r\n              }}\r\n              variant=\"contained\"\r\n            >\r\n              Cargar operación 3\r\n            </Button>\r\n          </Grid>\r\n          <Grid item sm=\"auto\" xs={12}>\r\n            <Button\r\n              fullWidth\r\n              color=\"secondary\"\r\n              className=\"botonEncabezado\"\r\n              disabled={memoria.length === 0 || finalizado}\r\n              onClick={this.aumentarContador}\r\n              variant=\"contained\"\r\n            >\r\n              Siguiente clock\r\n              <TimerIcon />\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container spacing={16}>\r\n          <Grid container direction=\"column\" item lg={4} md={6} spacing={16} xs={12}>\r\n            <Grid item>\r\n              <Card>\r\n                <CardHeader\r\n                  disableTypography\r\n                  title={<Typography variant=\"h6\">Decodificador</Typography>}\r\n                />\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Instrucción</TableCell>\r\n                      <TableCell>Operación</TableCell>\r\n                      <TableCell>Comentario</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {decodificador.map(operacion => (\r\n                      <TableRow key={operacion.instruccion}>\r\n                        <TableCell>\r\n                          {'0000'.substr(operacion.instruccion.toString(2).length) +\r\n                            operacion.instruccion.toString(2)}\r\n                        </TableCell>\r\n                        <TableCell>{operacion.operacion}</TableCell>\r\n                        <TableCell>{operacion.comentario}</TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </Card>\r\n            </Grid>\r\n            <Grid container item spacing={16}>\r\n              <Grid item xs={6}>\r\n                <Card>\r\n                  <CardHeader\r\n                    disableTypography\r\n                    title={<Typography variant=\"h6\">Contador</Typography>}\r\n                  />\r\n                  <Table>\r\n                    <TableBody>\r\n                      {contador.map(({ color, valor }, indice) => (\r\n                        <TableRow key={indice}>\r\n                          <TableCell style={{ color }}>\r\n                            {'00000000'.substr(valor.toString(2).length) + valor.toString(2)}\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      ))}\r\n                    </TableBody>\r\n                  </Table>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <Card>\r\n                  <CardHeader\r\n                    disableTypography\r\n                    title={<Typography variant=\"h6\">Registro de instrucciones</Typography>}\r\n                  />\r\n                  <Table>\r\n                    <TableBody>\r\n                      {registroInstrucciones.map(({ color, valor }, indice) => (\r\n                        <TableRow key={indice}>\r\n                          <TableCell style={{ color }}>\r\n                            {'0000'.substr(valor.toString(2).length) + valor.toString(2)}\r\n                          </TableCell>\r\n                          <TableCell style={{ color }}>\r\n                            {\r\n                              decodificador.find(({ instruccion }) => instruccion === valor)\r\n                                .comentario\r\n                            }\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      ))}\r\n                    </TableBody>\r\n                  </Table>\r\n                </Card>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container direction=\"column\" item lg={4} md={6} spacing={16} xs={12}>\r\n            <Grid item>\r\n              <Card>\r\n                <CardHeader\r\n                  disableTypography\r\n                  title={<Typography variant=\"h6\">Memoria</Typography>}\r\n                />\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Dirección</TableCell>\r\n                      <TableCell>Contenido</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {memoria.map(({ color, direccion, valor }) => (\r\n                      <TableRow key={direccion}>\r\n                        <TableCell style={{ color }}>\r\n                          {'00000000'.substr(direccion.toString(2).length) + direccion.toString(2)}\r\n                        </TableCell>\r\n                        <TableCell style={{ color }}>\r\n                          {valor !== null &&\r\n                            '000000000000'.substr(valor.toString(2).length) + valor.toString(2)}\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item>\r\n              <Card>\r\n                <CardHeader\r\n                  disableTypography\r\n                  title={<Typography variant=\"h6\">Registro de direcciones</Typography>}\r\n                />\r\n                <Table>\r\n                  <TableBody>\r\n                    {registroDirecciones.map(({ color, valor }, indice) => (\r\n                      <TableRow key={indice}>\r\n                        <TableCell style={{ color }}>\r\n                          {'00000000'.substr(valor.toString(2).length) + valor.toString(2)}\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container direction=\"column\" item lg={4} md={6} spacing={16} xs={12}>\r\n            <Grid item>\r\n              <Card>\r\n                <CardHeader disableTypography title={<Typography variant=\"h6\">ALU</Typography>} />\r\n                <Grid container spacing={16}>\r\n                  <Grid item xs={6}>\r\n                    <Card>\r\n                      <CardHeader\r\n                        disableTypography\r\n                        title={<Typography variant=\"h6\">Acumulador</Typography>}\r\n                      />\r\n                      <Table>\r\n                        <TableBody>\r\n                          {acumulador.map(({ color, valor }, indice) => (\r\n                            <TableRow key={indice}>\r\n                              <TableCell style={{ color }}>\r\n                                {'000000000000'.substr(valor.toString(2).length) +\r\n                                  valor.toString(2)}\r\n                              </TableCell>\r\n                              <TableCell style={{ color }}>{valor}</TableCell>\r\n                            </TableRow>\r\n                          ))}\r\n                        </TableBody>\r\n                      </Table>\r\n                    </Card>\r\n                  </Grid>\r\n                  <Grid item xs={6}>\r\n                    <Card>\r\n                      <CardHeader\r\n                        disableTypography\r\n                        title={<Typography variant=\"h6\">Registro de entrada</Typography>}\r\n                      />\r\n                      <Table>\r\n                        <TableBody>\r\n                          {registroEntrada.map(({ color, valor }, indice) => (\r\n                            <TableRow key={indice}>\r\n                              <TableCell style={{ color }}>\r\n                                {'000000000000'.substr(valor.toString(2).length) +\r\n                                  valor.toString(2)}\r\n                              </TableCell>\r\n                            </TableRow>\r\n                          ))}\r\n                        </TableBody>\r\n                      </Table>\r\n                    </Card>\r\n                  </Grid>\r\n                </Grid>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item>\r\n              <Card>\r\n                <CardHeader\r\n                  disableTypography\r\n                  title={<Typography variant=\"h6\">Registro de datos</Typography>}\r\n                />\r\n                <Table>\r\n                  <TableBody>\r\n                    {registroDatos.map(({ color, valor }, indice) => (\r\n                      <TableRow key={indice}>\r\n                        <TableCell style={{ color }}>\r\n                          {'000000000000'.substr(valor.toString(2).length) + valor.toString(2)}\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <div className=\"marcaDeAgua\">\r\n          <Typography variant=\"h5\">Simulación CPU</Typography>\r\n          <Typography variant=\"h6\">Arquitectura de Microcontroladores 2019-1</Typography>\r\n          <Typography variant=\"h6\">Universidad de La Sabana</Typography>\r\n          <div>Nicolás Mateo Bossa Forero</div>\r\n          <div>Juan Pablo López Cifuentes</div>\r\n          <div>Jenncy Joham Villamizar Rodríguez</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CPU;\r\n","import React, { Component } from 'react';\n\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core';\n\nimport CPU from './components/cpu/cpu';\n\nconst theme = createMuiTheme({\n  overrides: {\n    MuiTableCell: {\n      root: {\n        padding: '0 10px'\n      }\n    },\n    MuiTableRow: {\n      root: {\n        height: 0\n      }\n    }\n  },\n  typography: {\n    useNextVariants: true\n  }\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <MuiThemeProvider theme={theme}>\n        <CPU />\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}